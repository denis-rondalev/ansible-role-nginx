---
# Enable NGINX and NGINX modules.
# Variables for these options can be found below.
# Default is true.
nginx_enable: true

# Print NGINX configuration file to terminal after executing playbook.
nginx_debug_output: false

# Options are 'opensource' or 'plus'.
nginx_type: "opensource"

# (Optional) Specify which version of NGINX you want to install.
# Default is to install the latest release.
# nginx_version: "=19-1~bionic"
# For NGINX Plus and modules you'll need a wilcard like below (which installs plus-20 and modules)
# : "-20*"

# Start NGINX service.
nginx_start: true

nginx_dhparam_path: "/etc/ssl/certs/dhparam.pem"

# selfsigned
nginx_selfsigned_key_path: "/etc/ssl/private/nginx-selfsigned.key"
nginx_selfsigned_cert_path: "/etc/ssl/certs/nginx-selfsigned-cert.pem"

# Specify repository origin for NGINX Open Source.
# Options are 'nginx_repository', 'source' or 'os_repository'.
# Only works if 'nginx_type' is set to 'opensource'.
# Default is nginx_repository.
nginx_install_from: nginx_repository

# Specify source install options for NGINX Open Source.
# Options represent whether to install from source also or to install from packages (default).
# These only apply if 'nginx_install_from' is set to 'source'.
# For the tools, true means we will install from a package and false means install from source.
# 'nginx_install_source_build_tools' will install compiler and build tools from packages.
# If false, you need to have these present.
nginx_install_source_build_tools: true
nginx_install_source_pcre: false
nginx_install_source_openssl: true
nginx_install_source_zlib: false

# Specify source install module for NGINX Open Source.
# You can select any of the static modules listed on http://nginx.org/en/docs/configure.html.
# Format is '--with-*' where '*' should be used as static module name in the list below. (see an example below).
# Default is 'http_ssl_module'. (DO NOT remove it if you need SSL support).
nginx_static_modules: ["http_ssl_module"]
# nginx_static_modules: ['http_v2_module']  # Example for '--with-http_v2_module'

# (Optional) Choose where to fetch the NGINX signing key from.
# Default is the official NGINX signing key host.
# nginx_signing_key: http://nginx.org/keys/nginx_signing.key

# (Optional) Specify repository for NGINX Open Source or NGINX Plus.
# Only works if 'install_from' is set to 'nginx_repository' when installing NGINX Open Source.
# Defaults are the official NGINX repositories.
# nginx_repository: deb [arch=amd64] https://nginx.org/packages/mainline/debian/ buster nginx

# Specify which branch of NGINX Open Source you want to install.
# Options are 'mainline' or 'stable'.
# Only works if 'install_from' is set to 'nginx_repository' or 'source'.
# Default is mainline.
nginx_branch: "mainline"

# Location of your NGINX Plus license in your local machine.
# Default is the files folder within the NGINX Ansible role.
nginx_license:
  certificate: license/nginx-repo.crt
  key: license/nginx-repo.key

# Set up NGINX Plus license before installation.
# Default is true.
nginx_setup_license: false

# Remove NGINX Plus license and repository after installation for security purposes.
# Default is true.
nginx_remove_license: false

# Specify whether or not you want this role to install the EPEL package when installing certain NGINX Plus modules.
# Using 'true' will install EPEL.
# Using 'false' will not install EPEL.
# Default is true.
nginx_install_epel_release: true

# Install NGINX Dynamic Modules.
# You can select any of the dynamic modules listed below. Beware of NGINX Plus only dynamic modules (these are marked).
# Format is list with either the dynamic module name or a dictionary (see njs for an example).
# When using a dictionary, the default value for state is present, and for version it's nginx_version if specified.
# Default is an empty list (no dynamic modules are installed).
nginx_modules:
  - name: geoip
    state: present
  # - auth-spnego  # NGINX Plus
  # - brotli  # NGINX Plus
  # - cookie-flag  # NGINX Plus
  # - encrypted-session  # NGINX Plus
  # - geoip2  # NGINX Plus
  # - headers-more  # NGINX Plus
  # - image-filter
  # - lua  # NGINX Plus
  # - name: njs  # Required
  #   state: present  # Optional
  #   version: =1.19.4+0.4.4-1~bionic  # Optional
  # - opentracing  # NGINX Plus
  # - passenger  # NGINX Plus
  # - perl  # NGINX Plus
  # - prometheus  # NGINX Plus
  # - rtmp
  # - subs-filter  # NGINX Plus
  # - waf  # NGINX Plus
  # - xslt

nginx_setup_vars: ["install", "uninstall", "upgrade"]

nginx_default_setup: install

nginx_state_vals:
  install: present
  uninstall: absent
  upgrade: latest

nginx_state: "{{ nginx_state_vals[nginx_setup] | default(nginx_state_vals[nginx_default_setup]) }}"

# Supported NGINX Open Source distributions
# https://nginx.org/en/docs/install.html
nginx_distributions:
  [
    "Alpine",
    "Amazon",
    "CentOS",
    "Debian",
    "FreeBSD",
    "RedHat",
    "SLES",
    "Ubuntu",
    "NetBSD",
    "OpenBSD",
    "DragonFlyBSD",
    "HardenedBSD",
  ]

# Supported NGINX Plus distributions
# https://docs.nginx.com/nginx/technical-specs/
nginx_plus_distributions:
  [
    "Alpine",
    "Amazon",
    "CentOS",
    "Debian",
    "FreeBSD",
    "OracleLinux",
    "RedHat",
    "SLES",
    "Ubuntu",
  ]

# Default NGINX signing key
nginx_default_signing_key_pgp: https://nginx.org/keys/nginx_signing.key
nginx_default_signing_key_rsa_pub: https://nginx.org/keys/nginx_signing.rsa.pub

# Default NGINX Open Source repositories
nginx_default_repository_alpine:
  "@nginx http://nginx.org/packages/{{ (nginx_branch == 'mainline') | ternary('mainline/', '') }}\
  alpine/v{{ ansible_facts['distribution_version'] | regex_search('^[0-9]+\\.[0-9]+') }}/main"
nginx_default_repository_amazon: "https://nginx.org/packages/{{ (nginx_branch == 'mainline') | ternary('mainline/', '') }}/amzn2/$releasever/$basearch"
nginx_default_repository_debian:
  - "deb [arch={{ (ansible_facts['architecture'] == 'aarch64') | ternary('arm64', 'amd64') }} signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://nginx.org/packages/{{ (nginx_branch == 'mainline') | ternary('mainline/', '') }}\
    {{ ansible_facts['distribution'] | lower }}/ {{ ansible_facts['distribution_release'] }} nginx"
  - "deb-src [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://nginx.org/packages/{{ (nginx_branch == 'mainline') | ternary('mainline/', '') }}\
    {{ ansible_facts['distribution'] | lower }}/ {{ ansible_facts['distribution_release'] }} nginx"
nginx_default_repository_redhat:
  "https://nginx.org/packages/{{ (nginx_branch == 'mainline') | ternary('mainline/', '') }}\
  {{ (ansible_facts['distribution'] == 'CentOS') | ternary('centos', 'rhel') }}/\
  {{ ansible_facts['distribution_major_version'] }}/$basearch/"
nginx_default_repository_suse:
  "https://nginx.org/packages/{{ (nginx_branch == 'mainline') | ternary('mainline/', '') }}\
  sles/{{ ansible_facts['distribution_major_version'] }}"

# Default NGINX Plus repositories
nginx_plus_default_repository_alpine: "https://pkgs.nginx.com/plus/alpine/v{{ ansible_facts['distribution_version'] | regex_search('^[0-9]+\\.[0-9]+') }}/main"
nginx_plus_default_repository_amazon: "https://pkgs.nginx.com/plus/amzn{{ (ansible_facts['distribution_major_version'] is version('2', '==')) | ternary('2', '') }}/$releasever/$basearch"
nginx_plus_default_repository_debian: "deb [arch={{ (ansible_facts['architecture'] == 'aarch64') | ternary('arm64', 'amd64') }} signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] https://pkgs.nginx.com/plus/{{ ansible_facts['distribution'] | lower }} {{ ansible_facts['distribution_release'] }} nginx-plus"
nginx_plus_default_repository_freebsd: "https://pkgs.nginx.com/plus/freebsd/${ABI}/latest"
nginx_plus_default_repository_redhat:
  "https://pkgs.nginx.com/plus/{{ (ansible_facts['distribution'] == 'CentOS') | ternary('centos', 'rhel') }}/\
  {{ (ansible_facts['distribution_version'] is version('7.4', '>=')
  and ansible_facts['distribution_version'] is version('8', '<')) | ternary('7.4', ansible_facts['distribution_major_version']) }}/$basearch/"
nginx_plus_default_repository_suse:
  "https://pkgs.nginx.com/plus/sles/{{ ansible_facts['distribution_major_version'] }}\
  ?ssl_clientcert=/etc/ssl/nginx/nginx-repo-bundle.crt&ssl_verify=peer"

# Alpine dependencies
nginx_alpine_dependencies: ["ca-certificates", "coreutils", "openssl", "pcre2"]

# Debian dependencies
nginx_debian_dependencies:
  [
    "apt-transport-https",
    "ca-certificates",
    "gpg-agent",
    "openssl",
    "python3-acme",
    "python3-certbot",
    "python3-mock",
    "python3-openssl",
    "python3-pkg-resources",
    "python3-pyparsing",
    "python3-zope.interface",
    "python3-certbot-nginx",
  ]

# Red Hat dependencies
nginx_redhat_dependencies:
  ["ca-certificates", "openssl", "certbot", "python3-certbot-nginx"]

# SLES dependencies
nginx_sles_dependencies: ["ca-certificates"]

# FreeBSD dependencies
nginx_freebsd_dependencies: ["security/ca_root_nss"]

# Default locations and versions when 'nginx_install_from' is set to 'source'
pcre_version: pcre-8.45
zlib_version: zlib-1.2.11
openssl_version: openssl-1.1.1m

# Supported NGINX Open Source dynamic modules
nginx_modules_list: ["geoip", "image-filter", "njs", "perl", "xslt"]

# Supported NGINX Plus dynamic modules
nginx_plus_modules_list:
  [
    "auth-spnego",
    "brotli",
    "encrypted-session",
    "geoip",
    "geoip2",
    "headers-more",
    "image-filter",
    "lua",
    "njs",
    "opentracing",
    "passenger",
    "perl",
    "prometheus",
    "rtmp",
    "subs-filter",
    "xslt",
  ]

# Install NGINX Amplify.
# Use your NGINX Amplify API key.
# Requires access to either the NGINX stub_status or the NGINX Plus REST API.
# Default is null.
nginx_amplify_enable: false
nginx_amplify_api_key: null

# Set SELinux enforcing for NGINX (CentOS/Red Hat only) - you may need to open ports on your own
nginx_selinux: false

# Enable enforcing mode if true.  Permissive if false (audit only, no enforcing) globally (only works with nginx_selinux: true)
nginx_selinux_enforcing: false

# List of TCP ports to add to http_port_t type (80 and 443 have this type already)
# nginx_selinux_tcp_ports:
#   - 80
#   - 443

# List of UDP ports to add to http_port_t type
# nginx_selinux_udp_ports:
#   - 80
#   - 443

# Temporary directory to hold selinux modules
nginx_selinux_tempdir: /tmp

# Enable systemd modifications
# ** ALL of the following variables are ignored unless this is set to true **
nginx_service_modify: false

# Remove the override file completely
nginx_service_clean: false

# Override the systemd directory
# Default is /etc/systemd/system/nginx.service.d
nginx_service_overridepath: /etc/systemd/system/nginx.service.d

# Override the systemd filename
# Default is override.conf
nginx_service_overridefilename: override.conf

# Set service timeout for systemd systems in seconds
# [Service]
# TimeoutStartSec=90
# TimeoutStopSec=90
# Default is to comment this out
# nginx_service_timeoutstartsec: 90
# nginx_service_timeoutstopsec: 90

# Set the restart policy for systemd systems
# Values = no (default), on-failure, on-abnormal, on-watchdog, on-abort, always
# [Service]
# Restart=on-failure
# Default is to comment this out
# nginx_service_restart: on-failure

# Set the restart timer in seconds
# [Service]
# RestartSec=5s
# Default is to comment this out
# nginx_service_restartsec: 5s

# Enable a custom systemd override file
# ** This could break the service **
# Setting this to true disables custom values above
nginx_service_custom: false

# Filename and path for systemd override file
# Setting this will overwrite existing override file
nginx_service_custom_file: "{{ role_path }}/files/services/nginx.override.conf"

# Choose to install BSD packages or ports.
# Options are true for packages or false for ports.
# Default is true.
nginx_bsd_install_packages: true

# Choose to update BSD ports collection.
# Options are true for update or false for do not update.
# Default is true.
nginx_bsd_update_ports: true

# Choose to install packages built from BSD ports collection if
# available.
# Options are true for use packages or false for do not use packages.
# Default is true.
nginx_bsd_portinstall_use_packages: true

# Create custom logrotate config
nginx_logrotate_conf_enable: false
nginx_logrotate_conf:
  paths:
    - "/var/log/nginx/*.log"
  options:
    - daily
    - missingok
    - rotate 62
    - compress
    - delaycompress
    - notifempty
    - create 0644 www-data adm # Changes nginx logs permissions
    - sharedscripts
